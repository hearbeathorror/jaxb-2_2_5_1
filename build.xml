<?xml version="1.0" encoding="UTF-8" ?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.
 
 You can obtain a copy of the license at
 https://jwsdp.dev.java.net/CDDLv1.0.html
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 https://jwsdp.dev.java.net/CDDLv1.0.html  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->

<!-- Use the following doctypedecl for DTD aware editing.  Comment out b/c
     it presumably causes Ant problems for some users.
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "project.dtd">
-->

<project name="jaxb" basedir="." default="compile">
    <description>
        JAXB-RI Master Project
        ======================
 
        This project is organized into multiple sub-projects.  Each sub-project is
        responsible for building itself.
        The build files are setup such that you can build the sub-
        projects independently or all together.

        For example, building the codemodel sub-project causes all of codemodel sources 
        in jaxb-ri/codemodel/src to be compiled into jaxb-ri/codemodel/build/classes.

        To build the entire project, simply run 'ant' in the jaxb-ri directory.
        To build a sub-project, simply cd into the directory and run 'ant'.

        To create a distribution of the entire project, simply run 'ant dist' in
        the jaxb-ri directory.

        Use parse-ipr (http://parse-ipr.dev.java.net/) to set up the classpath for
        debugging.

       $Id: build.xml,v 1.60 2006-04-25 22:40:17 kohsuke Exp $
    </description>

    <!-- initialize build properties -->
    <property file="${basedir}/build.properties" />

    <import file="build-taskdefs.xml" />

    <!--
      when building jars for Maven, we want to put suffix
      (sometimes with version like '-2.0.beta1', with date '-20051208', or with '-SNAPSHOT')
      this property lets you do that.
    -->
    <property name="jar.suffix" value="" />

    <target name="init">
        <!-- this property is used by "xjc -version" and is also set in each of the
             generated ObjectFactory classes.  It should be set via the RE build
             scripts via 'ant -Dbuild.id="b08"' otherwise the current date and time
             will be used -->
        <tstamp>
            <format property="now" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>
        <property name="build.id" value="${now}(${user.name})" />
        <property name="build.version" value="${release.impl.version}-${build.id}-${release.impl.version.suffix}" />
        <echo message="The build id is: ${build.version}" />
    </target>

    <!-- compile all of the sources into <project>/build/classes-->
    <target name="compile"
            depends="init"
            description="compile codemodel, runtime, and xjc sub-projects">
        <ant dir="codemodel"           target="compile-codemodel" />
        <ant dir="codemodel"           target="annotation-compiler" />
        <ant dir="apgen"               target="compile" />
        <ant dir="runtime"             target="compile" />
        <ant dir="runtime-fi"          target="compile" />
        <ant dir="runtime-staxex"      target="compile" />
        <ant dir="runtime-deprecated"  target="compile-runtime-deprecated" />
        <ant dir="xjc"                 target="compile" />
        <ant dir="tools"               target="compile" />
    </target>



    <target name="architecture-document"
            description="generate architecture documents (which is just a glorified javadoc)">
      <arch-doc destdir="${jaxb.root}/build/javadoc" title="JAXB RI">
        <params>
          <packageset dir="${jaxb.root}/javadoc"/>
          <group title="Root Architecture Document" packages="jaxb" />

          <packageset dir="${codemodel.src}"/>
          <group title="CodeModel" packages="com.sun.codemodel*" />

          <packageset dir="${runtime.src}"/>
          <packageset dir="${runtime.root}/arch-doc"/>
          <group title="Runtime API for JAX-WS" packages="com.sun.xml.bind.api" />
          <group title="Runtime" packages="com.sun.xml.bind*" />

          <packageset dir="${xjc.src}"/>
          <group title="XJC API for JAX-WS" packages="com.sun.tools.xjc.api" />
          <group title="XJC" packages="com.sun.tools.xjc*:com.sun.tools.jxc*" />
        </params>
      </arch-doc>
    </target>

    <!-- process sample app meta data -->
    <target name="process-samples"
            description="process sample.meta data">
        <ant dir="samples" target="process-samples"/>
    </target>



    <!-- task that generates a manifest file -->
    <macrodef name="createManifest">
      <attribute name="extensionName"/>
      <attribute name="file"/>
      <sequential>
        <copy tofile="@{file}"
              file="${manifest.root}/manifest.mf"
              overwrite="yes"/>
        <replace file="@{file}">
            <replacefilter token="@@@@SPEC_VERSION@@@@"
                           value="${release.spec.version}" />
            <replacefilter token="@@@@IMPL_VERSION@@@@"
                           value="${release.impl.version}"/>
            <replacefilter token="@@@@VENDOR_ID@@@@"
                           value="com.sun"/>
            <replacefilter token="@@@@EXTENSION_NAME@@@@"
                           value="@{extensionName}"/>
            <replacefilter token="@@@@BUILD_ID@@@@"
                           value="${build.id}"/>
        </replace>
      </sequential>
    </macrodef>


    <target name="test-docs" description="generate docs for a test">
        <mkdir dir="build/docs" />
        <generate-docs dest="build/docs">
            <source>
                <fileset dir="${jaxb.docs}" />
            </source>
        </generate-docs>
    </target>

    <!-- generate a distribution -->
    <target name="dist"
            depends="compile,integrate-1.0-compiler"
            description="create a distribution in jaxb-ri/dist">
        <mkdir dir="${jaxb.dist}" />
        <mkdir dir="${jaxb.dist}/bin" />
        <mkdir dir="${jaxb.dist}/lib" />
        <mkdir dir="${jaxb.dist}/docs/api" />

        <!-- Process samples first. We need to decide which samples to ship first,
             or otherwise we can't generate documentation.

             if wspack.home is set, then process samples as 'JWSDP',
             otherwise process samples as 'RI' -->
        <condition property="in.wspack">
            <isset property="wspack.home"/>
        </condition>
        <antcall target="process-sample.inwspack"/>
        <antcall target="process-sample.notinwspack"/>


        <parallel>
          <!-- copy docs -->
          <sequential>
              <unzip src="${jaxb.libs.redist}/jaxb-api-doc.zip"
                     dest="${jaxb.dist}/docs/api" />
              <generate-docs dest="${jaxb.dist}/docs">
                  <source>
                      <fileset dir="${jaxb.docs}" />
                  </source>
              </generate-docs>
          </sequential>

          <!-- copy redist jars -->
          <sequential>
              <copy todir="${jaxb.dist}/lib">
                  <fileset dir="${jaxb.libs.redist}">
                       <include name="**/*.jar"/>
                       <include name="**/*.zip"/>
                  </fileset>
              </copy>
          </sequential>


          <!-- JAXB 2.0 runtime jar-->
          <!-- generate jaxb-impl.jar for 2.0 runtime -->
          <sequential>
              <createManifest file="${runtime.root}/build/manifest.rt" extensionName="com.sun.xml.bind" />
              <!--taskdef name="stripper" classname="org.kohsuke.stripper.StripperTask">
                <classpath>
                  <pathelement path="${jaxb.libs.util}/stripper.jar"/>
                </classpath>
              </taskdef>
              <stripper remove="basicDebugInfo compilerInfo">
                <source dir="${runtime.classes}" includes="**/*.class" />
              </stripper-->
              <manifest mode="update" file="${runtime.root}/build/manifest.rt">
                <attribute name="Class-Path" value="jaxb-api.jar activation.jar jsr173_1.0_api.jar jaxb1-impl${jar.suffix}.jar" /> <!-- added for JES4 script compatibility -->
                <section name="com.sun.xml.bind.v2.runtime">
                  <attribute name="Implementation-Version" value="${build.version}" />
                </section>
              </manifest>
              <jar jarfile="${jaxb.dist}/lib/jaxb-impl${jar.suffix}.jar"
                   manifest="${runtime.root}/build/manifest.rt"
                   duplicate="fail">
                  <fileset dir="${runtime.classes}"/>
                  <fileset dir="${runtime-fi.classes}"/>
                  <fileset dir="${runtime-staxex.classes}"/>
                  <fileset dir="${runtime.src}" includes="META-INF/**/*" />
                  <zipgroupfileset dir="${jaxb.libs.runtime2}" includes="*.jar" />
              </jar>
          </sequential>


          <!-- JAXB 1.0 runtime jar -->
          <!-- generate jaxb1-impl.jar for 1.0 runtime -->
          <!-- include the contents of the old jaxb-libs.jar -->
          <sequential>
              <createManifest file="${runtime.root}/build/manifest.rt1" extensionName="com.sun.xml.bind" />
              <mkdir dir="${jaxb.root}/build/jaxb-1-impl-rejar"/>
              <unzip dest="${jaxb.root}/build/jaxb-1-impl-rejar">
                <fileset dir="${jaxb.libs.runtime}" includes="*.jar" />
              </unzip>
              <jar jarfile="${jaxb.dist}/lib/jaxb1-impl${jar.suffix}.jar"
                   manifest="${runtime.root}/build/manifest.rt1">
                  <!-- can't use zipgroupfileset because of the duplicate version.properties -->
                  <fileset dir="${jaxb.root}/build/jaxb-1-impl-rejar"/>
                  <fileset dir="${runtime-deprecated.classes}"/>
              </jar>
              <delete dir="${jaxb.root}/build/jaxb-1-impl-rejar"/>
          </sequential>


          <!-- generate jaxb-xjc.jar: xjc, codemodel, and schemagen subprojects -->
          <sequential>
              <createManifest file="${xjc.root}/manifest.xjc" extensionName="com.sun.tools.xjc" />

              <!-- the manifest classpath isn't quite like any of the path structures
                   supported by Ant, so build the list the old fashioned way.

                   and yes, it's OK to have new lines and spaces inbetween.
              -->
              <property name="manifest.classpath"
                value="jaxb-api.jar jaxb-impl${jar.suffix}.jar jsr173_1.0_api.jar activation.jar" />
              <echo file="${xjc.root}/manifest.xjc" append="true"
>Main-Class: com.sun.tools.xjc.XJCFacade
Class-Path: ${manifest.classpath}

</echo>
              <copy todir="${xjc.classes}">
                <fileset dir="${xjc.src}" includes="com/sun/tools/xjc/runtime/*.java" />
                <mapper type="glob" from="*.java" to="*.java_" />
              </copy>

              <mkdir dir="${jaxb.root}/build/jaxb-xjc-rejar"/>
              <unzip dest="${jaxb.root}/build/jaxb-xjc-rejar">
                <fileset dir="${jaxb.libs.compiler}" includes="*.jar" />
              </unzip>
              <jar jarfile="${jaxb.dist}/lib/jaxb-xjc${jar.suffix}.jar"
                   manifest="${xjc.root}/manifest.xjc"
                   duplicate="fail">
                  <!-- can't use zipgroupfileset because of the duplicate LICENSE.txt -->
                  <fileset dir="${jaxb.root}/build/jaxb-xjc-rejar"/>
                  <fileset dir="${xjc.classes}"/>
                  <fileset dir="${codemodel.classes}"/>
                  <metainf dir="${xjc.src}/META-INF" />
                  <!-- bundle the 1.0 compiler in the side directory -->
                  <zipfileset dir="${xjc10.classes}/.." />
              </jar>
              <delete dir="${jaxb.root}/build/jaxb-xjc-rejar"/>
          </sequential>


          <!-- copy bin scripts -->
          <sequential>
              <copy file="${jaxb.root}/tools/bin/xjc.bat" todir="${jaxb.dist}/bin"/>
              <copy file="${jaxb.root}/tools/bin/xjc.sh"  todir="${jaxb.dist}/bin"/>
              <copy file="${jaxb.root}/tools/bin/schemagen.bat" todir="${jaxb.dist}/bin"/>
              <copy file="${jaxb.root}/tools/bin/schemagen.sh"  todir="${jaxb.dist}/bin"/>
              <chmod file="${jaxb.dist}/bin/xjc.sh" perm="ugo+rx"/>
              <chmod file="${jaxb.dist}/bin/schemagen.sh" perm="ugo+rx"/>
          </sequential>


          <!-- copy samples -->
          <sequential>
              <mkdir dir="${jaxb.dist}/samples"/>
              <copy todir="${jaxb.dist}/samples">
                  <fileset dir="${jaxb.root}/samples/work"
                           defaultexcludes="yes">
                      <exclude name="CHANGELOG.txt"/>
                      <exclude name="**/build.golden.regexp" />
                      <!-- .cvsignore is a control file used for CVS -->
                      <exclude name="**/.cvsignore" />
                      <exclude name="**/sample.meta" />
                      <exclude name="**/gen-src/**/*" />
                      <exclude name="**/classes/**/*" />
                  </fileset>
              </copy>
          </sequential>
        </parallel>
    </target>

    <target name="dist-zip" depends="dist"
        description="run dist then package the image to jaxb-ri.zip">

        <zip destfile="${jaxb.root}/jaxb-ri.zip">
            <zipfileset dir="${jaxb.dist}" prefix="jaxb-ri" />
        </zip>
    </target>

    <!-- this target will be run when the jwsdp build is driving.  It will
         cause the sample apps to have a jwsdp appropriate classpath -->
    <target name="process-sample.inwspack" if="in.wspack">
        <ant dir="samples" target="process-samples">
            <property name="samples.target" value="JWSDP"/>
        </ant>
        <!--replace dir="${jaxb.dist}/samples">
            <include name="**/build.xml"/>
            <replacefilter token="@@JAXB-RI_BUILD_PATH@@" />
        </replace-->
    </target>

    <!-- this target will be run when building a standalone RI dist.  It
         will cause the sample apps to have an RI appropriate classpath -->
    <target name="process-sample.notinwspack" unless="in.wspack">
        <ant dir="samples" target="process-samples">
            <property name="samples.target" value="RI"/>
        </ant>
        <!--replace dir="${jaxb.dist}/samples">
            <include name="**/build.xml"/>
            <replacefilter token="@@JAXB-RI_BUILD_PATH@@"
                           value="&lt;fileset dir=&quot;../..&quot; includes=&quot;lib/*.jar&quot; />" />
        </replace-->
    </target>

    <target name="dist-zip-with-src" depends="src-zip, dist-zip"/>

    <target name="src-zip" depends="dist"
            description="source zip files for JAXB RI jar files into the dist dir.">
      <parallel>
        <zip zipfile="${jaxb.dist}/lib/jaxb-impl.src.zip">
          <fileset dir="${runtime.src}"/>
          <fileset dir="${runtime-fi.src}"/>
          <fileset dir="${runtime-staxex.src}"/>
        </zip>
        <sequential>
          <mkdir dir="tmp" />
          <unjar src="${jaxb.libs}/src/xsom-src.zip" dest="tmp"/>
          <zip zipfile="${jaxb.dist}/lib/jaxb-xjc.src.zip">
            <fileset dir="${xjc.src}"/>
            <fileset dir="${codemodel.src}"/>
            <zipfileset src="${jaxb.libs}/src/resolver-src.zip" />
            <fileset dir="tmp/src"/>
          </zip>
          <delete dir="tmp" />
        </sequential>
      </parallel>
    </target>





    <target name="bin-installer"
            description="generate the binary distribution installer with the license click-through"
            depends="dist">

        <tstamp />

        <property name="bin.installer.stage" value="${jaxb.root}/build/bin-installer" />
        <property name="bin.installer.className" value="JAXB2_${DSTAMP}" />
        <property name="bin.installer.jar" value="${jaxb.root}/build/${bin.installer.className}.jar" />

        <mkdir dir="${bin.installer.stage}"/>
        <zip destfile="${bin.installer.stage}/package.zip">
            <zipfileset dir="${jaxb.dist}" prefix="jaxb-ri-${DSTAMP}" />
        </zip>

        <!-- build installer -->
        <ant dir="tools/installer" />
        <ant dir="tools/installer-builder" />

        <taskdef name="installerBuilder" classname="com.sun.tools.xjc.installer.builder.BuilderTask">
            <classpath>
                <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
            </classpath>
        </taskdef>

        <installerBuilder
          jarFile="${bin.installer.jar}"
          licenseFile="${jaxb.root}/docs/license.txt"
          zipFile="${bin.installer.stage}/package.zip" />

        <echo>binary installer produced at ${bin.installer.jar}</echo>
    </target>



    <patternset id="src-includes"
                description="This pattern set defines which files will be in/excluded in the src bundle">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
    </patternset>

    <target name="src-installer"
            description="generate the source code distribution installer with the license click-through"
            depends="dist">

        <tstamp />

        <property name="src.installer.stage" value="${jaxb.root}/build/src-installer" />
        <property name="src.installer.className" value="JAXB2_src_${DSTAMP}" />
        <property name="src.installer.class" value="${jaxb.root}/build/${src.installer.className}.jar" />
        <property name="src.installer.tmp" value="${jaxb.root}/build/src-tmp" />

        <!-- create jaxb-src.zip -->
        <mkdir dir="${src.installer.stage}"/>
        <zip destfile="${src.installer.stage}/package.zip" duplicate="fail" whenempty="fail">
            <zipfileset src="${jaxb.libs.redist}/jaxb-api-src.zip" prefix="jaxb-ri-${DSTAMP}/src" />
            <zipfileset dir="${xjc.src}" prefix="jaxb-ri-${DSTAMP}/src" defaultexcludes="true" >
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="${xjc.gensrc}" prefix="jaxb-ri-${DSTAMP}/src" defaultexcludes="true" >
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="${runtime.root}/arch-doc" prefix="jaxb-ri-${DSTAMP}/src" defaultexcludes="true" >
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="${runtime.src}" prefix="jaxb-ri-${DSTAMP}/src" defaultexcludes="true" >
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="runtime/build/src" prefix="jaxb-ri-${DSTAMP}/src" defaultexcludes="true" >
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="${codemodel.src}" prefix="jaxb-ri-${DSTAMP}/src" defaultexcludes="true" >
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="${jaxb.root}" includes="src-installer-build.xml"
                fullpath="jaxb-ri-${DSTAMP}/build.xml"/>
            <!-- additional jar files -->
            <zipfileset dir="${jaxb.libs.runtime}" includes="*.jar" prefix="jaxb-ri-${DSTAMP}/lib" />
            <zipfileset dir="${jaxb.libs.runtime2}" includes="*.jar" prefix="jaxb-ri-${DSTAMP}/lib" />
            <zipfileset dir="${jaxb.libs.compiler}" includes="*.jar" prefix="jaxb-ri-${DSTAMP}/lib" excludes="relaxngDatatype.jar" />
            <zipfileset dir="${jaxb.libs}/redist"  includes="*.jar" prefix="jaxb-ri-${DSTAMP}/lib" />
            <zipfileset dir="${jaxb.libs}/src" prefix="jaxb-ri-${DSTAMP}/lib">
                <include name="xsom-src.zip"/>
            </zipfileset>
        </zip>

        <!-- test the generated source bundle -->
        <delete dir="${src.installer.tmp}" failonerror="false" />
        <mkdir dir="${src.installer.tmp}" />
        <unzip dest="${src.installer.tmp}" src="${src.installer.stage}/package.zip"/>
        <ant dir="${src.installer.tmp}/jaxb-ri-${DSTAMP}" inheritAll="false" inheritRefs="false"/>

        <!-- delete the srctmp dir -->
        <delete dir="${src.installer.tmp}"/>

        <!-- build installer -->
        <ant dir="tools/installer" />
        <ant dir="tools/installer-builder" />

        <taskdef name="installerBuilder" classname="com.sun.tools.xjc.installer.builder.BuilderTask">
            <classpath>
                <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
            </classpath>
        </taskdef>

        <installerBuilder
          classFile="${src.installer.class}"
          licenseFile="${jaxb.root}/docs/license.txt"
          zipFile="${src.installer.stage}/package.zip" />

        <echo>source installer produced at ${src.installer.class}</echo>
    </target>

    <target name="installers"
            depends="bin-installer,src-installer"
            description="build both the binary and the source installer" />

    <target name="deploy-maven"
            depends="dist"
            description="deploy to java.net Maven repository">

        <delete dir="build/maven" />
        <mkdir dir="build/maven" />

        <copy todir="build/maven">
            <fileset dir="dist/lib" includes="jaxb*.jar" excludes="jaxb-api.jar" />
        </copy>
        <copy tofile="build/maven/jaxb-api${jar.suffix}.jar" file="dist/lib/jaxb-api.jar" />
        <checksum algorithm="md5">
          <fileset dir="build/maven" includes="*.jar" />
        </checksum>
        <checksum algorithm="sha">
          <fileset dir="build/maven" includes="*.jar" />
        </checksum>

        <cvs-import cvsroot=":pserver:${user.name}@kohsuke.sfbay:/cvs"
          src="build/maven"
          dest="jaxb/repo/jars" />
    </target>

    <!-- clean all of the builds -->
    <target name="clean"
            description="clean dist, build, docs, and each sub-project">
        <parallel>
          <!-- clean dist, and srcbundle -->
          <delete dir="${jaxb.dist}" />
          <delete dir="${srcbundle.dist}" />

          <!-- clean up docs and dists -->
          <!-- don't delete the top level docs directory -->
          <delete dir="${jaxb.docs}/api" />
          <!-- <delete dir="${jaxb.root}/dist" /> -->

          <!-- clean sub-projects -->
          <ant dir="codemodel"          target="clean-codemodel" />
          <ant dir="runtime"            target="clean" />
          <ant dir="runtime-fi"         target="clean" />
          <ant dir="runtime-staxex"     target="clean" />
          <ant dir="runtime-deprecated" target="clean-runtime-deprecated" />
          <ant dir="xjc"                target="clean" />
          <ant dir="pkg"                target="clean-pkg" />
          <ant dir="samples"            target="clean-samples"/>
          <ant dir="tools"              target="clean"/>
          <ant dir="apgen"              target="clean" />
          <ant dir="reflection"         target="clean" />
        </parallel>
    </target>


    <!-- wspack targets -->
    <target name="wspack"
            description="Create a jaxb distribution for the JWSDP">
        <echo message=" build.home is set to ${build.home}"/>
        <echo message="  dist.home is set to ${dist.home}"/>
        <echo message="wspack.home is set to ${wspack.home}"/>

        <!-- replicate the build dirs from our build in ${build.home} -->
        <mkdir dir="${build.home}/codemodel/build/classes"/>
        <mkdir dir="${build.home}/runtime/build/classes"/>
        <mkdir dir="${build.home}/xjc/build/classes"/>

        <!-- we need to redefine some of the jaxb properties when being built
             by wspack, so we will use <antcall> instead of listing an @depends
             on the wspack target.  -->

        <!-- compile each of the jaxb sub-projects into ${build.home} -->
        <antcall target="dist">
            <param name="codemodel.build"   value="${build.home}/codemodel/build"/>
            <param name="codemodel.classes" value="${build.home}/codemodel/build/classes"/>
            <param name="runtime.classes"   value="${build.home}/runtime/build/classes"/>
            <param name="xjc.classes"       value="${build.home}/xjc/build/classes"/>
            <param name="jaxb.dist"         value="${dist.home}"/>
        </antcall>

        <!-- replace the manifest file in jaxb-xjc.jar -->
        <createManifest file="${xjc.root}/manifest.xjc.jwsdp" extensionName="com.sun.tools.xjc" />

        <property name="jaxp.jars"          value="../../jaxp/lib"/>
        <property name="jwsdp.shared"       value="../../jwsdp-shared/lib"/>
        <property name="sjsxp.jars"         value="../../sjsxp/lib"/>
        <property name="jes.rpm"            value="../../lib"/>
        <property name="jes.svr4"           value="."/>
        <property name="jes.zip"            value="../../jwsdp-shared/lib"/>

        <property name="manifest.classpath" value="jaxb-api.jar jaxb-impl.jar jaxb1-impl.jar
        activation.jar
        ${jwsdp.shared}/activation.jar
        ${jes.svr4}/../../../../usr/share/lib/activation.jar
        ${jes.rpm}/activation.jar
        ${jes.zip}/activation.jar
        jsr173_api.jar
        ${sjsxp.jars}/jsr173_api.jar
        ${jes.svr4}/jsr173_api.jar
        ${jes.rpm}/jsr173_api.jar
        ${jes.zip}/jsr173_api.jar
          " />
        <echo file="${xjc.root}/manifest.xjc.jwsdp"
              append="true"
>Main-Class: com.sun.tools.xjc.XJCFacade
Class-Path: ${manifest.classpath}

</echo>
        <mkdir dir="${dist.home}/lib/tmp"/>
        <unjar src="${dist.home}/lib/jaxb-xjc.jar" dest="${dist.home}/lib/tmp"/>
        <move file="${dist.home}/lib/jaxb-xjc.jar" tofile="${dist.home}/lib/jaxb-xjc.jar.orig"/>
        <delete file="${dist.home}/lib/tmp/META-INF/MANIFEST.MF"/>
        <jar jarfile="${dist.home}/lib/jaxb-xjc.jar"
             manifest="${xjc.root}/manifest.xjc.jwsdp">
             <!-- unfortunately, we have to unjar and rejar the files to preserve the
                  other META-INF files, also need to strip out the resolver code -->
             <fileset dir="${dist.home}/lib/tmp">
                <exclude name="com/sun/org/apache/xml/internal/resolver/"/>
             </fileset>
        </jar>
        <delete dir="${dist.home}/lib/tmp"/>
        <delete file="${dist.home}/lib/jaxb-xjc.jar.orig"/>


        <!-- make the wspack dist, excluding unnecessary jaxb files -->
        <copy todir="${wspack.home}">
            <fileset dir="${dist.home}">
                <exclude name="lib/jaxb-api-src.zip"/>
                <exclude name="lib/jaxp-api.jar"/>
                <exclude name="lib/jaxb-api-doc.zip"/>
                <exclude name="**/api/"/>
                <exclude name="lib/jsr173_1.0_api.jar"/>
                <exclude name="lib/activation.jar"/>
            </fileset>
        </copy>

    </target>

    <target name="srcbundle"
            description="Create a src bundle for licensees">

        <!-- mkdir and copy entire tree minus private stuff -->
        <mkdir dir="${srcbundle.dist}"/>
        <copy todir="${srcbundle.dist}" includeemptydirs="true">
            <fileset dir="${jaxb.root}" >
                <exclude name="**/.cvsignore"/>
                <exclude name="**/.classpath"/>
                <exclude name="**/.project"/>
                <exclude name="**/CHANGELOG.txt"/>
                <exclude name="relaxng/"/>
                <exclude name="**/wspack/"/>
                <exclude name="**/srcbundle/"/>
                <exclude name="**/CVS/"/>
                <exclude name="**/test/"/>
                <exclude name="**/xjc/HOWTO*"/>
                <exclude name="**/tools/bin/*nxjc*"/>
                <exclude name="**/tools/etc/"/>
                <exclude name="**/tools/serialbox/"/>
                <exclude name="**/tools/servlet/"/>
                <exclude name="**/tools/locator-support/"/>
                <exclude name="**/tools/ls/"/>
                <exclude name="**/tools/synchronized-methods/"/>
                <exclude name="**/tools/webapp-commons/"/>
                <exclude name="**/tools/prelim-build/"/>
                <exclude name="**/tools/lib/util/commons-logging.jar"/>
                <exclude name="**/tools/lib/util/jaxm*"/>
                <exclude name="**/tools/lib/util/jdom.jar"/>
                <exclude name="**/tools/lib/util/js.jar"/>
                <exclude name="**/tools/lib/util/junit.jar"/>
                <exclude name="**/tools/lib/util/mailapi.jar"/>
                <exclude name="**/tools/lib/util/saaj*"/>
                <exclude name="**/tools/lib/util/servlet.jar"/>
                <exclude name="**/tools/lib/util/vmtools-0.4.jar"/>
                <exclude name="**/tools/lib/util/activation.jar"/>
                <exclude name="**/tools/lib/util/bsh-core.jar"/>
                <exclude name="**/tools/lib/util/smtp.jar"/>
                <exclude name="**/tools/lib/util/antlr.jar"/>
                <exclude name="**/tools/lib/util/bsh.jar"/>
                <exclude name="**/tools/lib/util/gsc.jar"/>
                <exclude name="**/tools/lib/util/jing.jar"/>
                <exclude name="**/tools/lib/src/ant-src.zip"/>
                <exclude name="**/tools/lib/src/antlr.src.zip"/>
                <exclude name="**/tools/lib/src/bsh-src.zip"/>
                <exclude name="**/tools/lib/src/dom4j-src.zip"/>
                <exclude name="**/tools/lib/src/gsc.src.zip"/>
                <exclude name="**/tools/lib/src/junit-src.zip"/>
                <exclude name="**/tools/lib/src/servlet-src.zip"/>
                <exclude name="**/tools/lib/src/Xerces-J-src.2.2.1.zip"/>
                <exclude name="**/tools/lib/src/xalan-j_2_4_0-src.zip"/>
                <exclude name="**/tools/lib/src/xmlpull_1_1_4_src.zip"/>
                <exclude name="**/pkg/"/>
                <exclude name="**/samples/*-workaround-*/"/>
                <exclude name="**/samples/pull-parser/lib/*.jar"/>
                <!-- these are the only two jars that we require people to get from
                     the web.  Comment these lines out for testing purposes  -->
                <exclude name="**/tools/lib/util/dom4j.jar"/>
            </fileset>
        </copy>

        <!-- clobber the real build files with the src build files -->
        <move file="${srcbundle.dist}/src-build.xml"
              tofile="${srcbundle.dist}/build.xml"
              overwrite="true"/>
        <move file="${srcbundle.dist}/src-build.properties"
              tofile="${srcbundle.dist}/build.properties"
              overwrite="true"/>
        <move file="${srcbundle.dist}/src-build.readme"
              tofile="${srcbundle.dist}/HOWTO-buildingJAXB.txt"
              overwrite="true"/>

    </target>

    <target name="check.os">
      <condition property="is.unix">
        <os family="unix"/>
      </condition>
    </target>

    <!-- assumes wspack target has been run -->
    <target name="create.pkg" depends="check.os" if="is.unix">
      <ant dir="pkg" target="deploy-pkg"/>
    </target>

    <!-- assumes wspack target has been run -->
    <target name="create.rpm" depends="check.os" if="is.unix">
      <ant dir="rpm" target="deploy-rpm"/>
    </target>

    <!-- assumes wspack target has been run -->
    <target name="create.hpux" depends="check.os" if="is.unix">
      <ant dir="hpux" target="deploy-hpux"/>
    </target>

    <!-- assumes dist or wspack target has been run -->
    <target name="create.zip" description="Create JAXB zip file distribution for JES">
      <!-- The zip build directory -->
      <property name="zip.build.dir"    value="${basedir}/build/zip"/>

      <!-- The zip distribution directory -->
      <property name="zip.release.dir"    value="${basedir}/zip-dist"/>

      <property name="zip.release"    value="1"/>
 
      <!-- make build and output directories -->
      <mkdir dir="${zip.build.dir}"/>
      <mkdir dir="${zip.release.dir}"/>

      <!-- copy files into the right directory structure -->
        <copy todir="${zip.build.dir}" overwrite="yes">
          <fileset dir="${basedir}/zip">
            <include name="filelist.txt"/>
            <include name="version"/>
          </fileset>
        </copy>
        <copy tofile="${zip.build.dir}/jaxb2/bin/xjc.bat"       file="${basedir}/tools/bin/xjc.zip.bat" />
        <copy tofile="${zip.build.dir}/jaxb2/bin/schemagen.bat" file="${basedir}/tools/bin/schemagen.zip.bat" />
        <copy todir="${zip.build.dir}/jaxb2/lib">
          <fileset dir="${jaxb.dist}/lib">
            <include name="jaxb-api.jar"/>
            <include name="jaxb-impl.jar"/>
            <include name="jaxb-xjc.jar"/>
            <include name="jaxb1-impl.jar"/>
          </fileset>
        </copy>

      <!-- replace parameters in version file  -->
      <replace file="${zip.build.dir}/version" value="${release.impl.version}">
        <replacetoken>@jaxb.version@</replacetoken>
      </replace>
      <!-- replace date stamp... 1st specify correct format  -->
      <tstamp>
        <format property="pkg.datestamp" pattern="yyyyMMdd"/>
      </tstamp>
      <replace file="${zip.build.dir}/version" value="${pkg.datestamp}">
        <replacetoken>@datestamp@</replacetoken>
      </replace>
      <replace file="${zip.build.dir}/version" value="${zip.release}">
        <replacetoken>@zip.release@</replacetoken>
      </replace>

      <!-- make zip file -->
      <zip destfile="${zip.release.dir}/jaxb2.zip" basedir="${zip.build.dir}" />
    </target>
    
    
    <target name="release-engineering"
            description="target for Sun RE builds"
            depends="src-zip,bin-installer" />


    <target name="project.dtd" description="create DTD for DTD-aware editing">
      <antstructure output="project.dtd"/>
    </target>


    <target name = "integrate-1.0-compiler"
            description="extract XJC 1.0">
      <mkdir dir="${xjc10.classes}"/>
      <unjar src="${jaxb.libs.compiler10}/jaxb1-xjc.jar" dest="${xjc10.classes}"/>
      <delete dir="${xjc10.classes}/META-INF/MANIFEST.MF"/>
    </target>


    <target name="integrate-fi">
      <get src="http://kohsuke.sfbay/hudson/job/fi/lastSuccessfulBuild/artifact/fi/FastInfoset/dist/FastInfoset.jar"
           dest="tools/lib/util/FastInfoset.jar" />
      <get src="http://kohsuke.sfbay/hudson/job/fi/lastSuccessfulBuild/artifact/fi/package/FastInfoset.src.zip"
           dest="tools/lib/src/FastInfoset.src.zip" />
    </target>

    <target name="integrate-stax-ex-hudson"
            description="integrate the last successful stax-ex Hudson build">
      <get src="http://kohsuke.sfbay/hudson/job/stax-ex/lastSuccessfulBuild/artifact/stax-ex/stax-ex/target/stax-ex.jar"
           dest="tools/lib/util/stax-ex.jar" />
      <get src="http://kohsuke.sfbay/hudson/job/stax-ex/lastSuccessfulBuild/artifact/stax-ex/stax-ex/target/stax-ex-src.zip"
           dest="tools/lib/util/stax-ex-src.zip" />
    </target>

    <target name="integrate-jsr222">
        <get src="http://kohsuke.sfbay/hudson/job/jsr222-mirror/lastSuccessfulBuild/artifact/jsr222-mirror/dist/jaxb-api.jar"
             dest="tools/lib/redist/jaxb-api.jar" />
        <get src="http://kohsuke.sfbay/hudson/job/jsr222-mirror/lastSuccessfulBuild/artifact/jsr222-mirror/dist/jaxb-api-src.zip"
             dest="tools/lib/redist/jaxb-api-src.zip" />
        <get src="http://kohsuke.sfbay/hudson/job/jsr222-mirror/lastSuccessfulBuild/artifact/jsr222-mirror/dist/jaxb-api-doc.zip"
             dest="tools/lib/redist/jaxb-api-doc.zip" />
    </target>
    
    
    <target name="integrate-xsom">
        <get src="http://kohsuke.sfbay/hudson/job/xsom/lastSuccessfulBuild/artifact/jaxb2-sources/xsom/build/xsom.jar"
             dest="tools/lib/rebundle/compiler/xsom.jar" />
        <get src="http://kohsuke.sfbay/hudson/job/xsom/lastSuccessfulBuild/artifact/jaxb2-sources/xsom/build/xsom-src.zip"
             dest="tools/lib/src/xsom-src.zip" />
    </target>
    
    
    <target name="integrate-txw2">
        <get src="http://kohsuke.sfbay/hudson/job/txw2/lastSuccessfulBuild/artifact/jaxb2-sources/txw2/build/txw2.jar"
             dest="tools/lib/rebundle/compiler/txw2.jar" />
        <get src="http://kohsuke.sfbay/hudson/job/txw2/lastSuccessfulBuild/artifact/jaxb2-sources/txw2/build/txwc2.jar"
             dest="tools/lib/util/txwc2.jar" />
        <get src="http://kohsuke.sfbay/hudson/job/txw2/lastSuccessfulBuild/artifact/jaxb2-sources/txw2/build/txw2-src.zip"
             dest="tools/lib/src/txw2-src.zip" />
    </target>
    
    
    <target name="integrate-rngom">
        <get src="http://kohsuke.sfbay/hudson/job/rngom/lastSuccessfulBuild/artifact/rngom/rngom/build/rngom.jar"
             dest="tools/lib/rebundle/compiler/rngom.jar" />
        <get src="http://kohsuke.sfbay/hudson/job/rngom/lastSuccessfulBuild/artifact/rngom/rngom/build/rngom-src.zip"
             dest="tools/lib/src/rngom-src.zip" />
    </target>
    
    
    <target name="integrate-istack-commons">
        <property name="istack.commons.runtime" value="http://kohsuke.sfbay/hudson/job/istack-commons/lastSuccessfulBuild/artifact/runtime/build/" />
        <property name="istack.commons.tools" value="http://kohsuke.sfbay/hudson/job/istack-commons/lastSuccessfulBuild/artifact/tools/build/" />
        
        <get src="${istack.commons.tools}/istack-commons-tools.jar"
             dest="tools/lib/rebundle/compiler/istack-commons-tools.jar" />
        <get src="${istack.commons.tools}/istack-commons-tools-src.zip"
             dest="tools/lib/src/istack-commons-tools-src.zip" />
        
        <get src="${istack.commons.runtime}/istack-commons-runtime.jar"
             dest="tools/lib/rebundle/runtime2/istack-commons-runtime.jar" />
        <get src="${istack.commons.runtime}/istack-commons-runtime-src.zip"
             dest="tools/lib/src/istack-commons-runtime-src.zip" />
    </target>
</project>
